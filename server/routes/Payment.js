const express = require("express");
const router = express.Router();
const Payment = require("../models/Payment.js");

// üìú L·∫•y danh s√°ch thanh to√°n
router.get("/", async (req, res) => {
    try {
        const payments = await Payment.find();
        res.json(payments);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch thanh to√°n", error });
    }
});

// üîç T√¨m ki·∫øm thanh to√°n theo OrderId
router.get("/search", async (req, res) => {
    try {
        const { orderId } = req.query;
        if (!orderId) {
            return res
                .status(400)
                .json({ message: "Vui l√≤ng cung c·∫•p OrderId ƒë·ªÉ t√¨m ki·∫øm" });
        }

        const payments = await Payment.find({
            orderId: orderId,
        });

        res.json(payments);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi t√¨m ki·∫øm thanh to√°n", error });
    }
});

// ‚ûï T·∫°o thanh to√°n m·ªõi
router.post("/", async (req, res) => {
    try {
        const { orderId, amount, paymentMethod, paymentDate } = req.body;
        if (!orderId || !amount || !paymentMethod || !paymentDate) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin thanh to√°n" });
        }
        const newPayment = new Payment({
            orderId,
            amount,
            paymentMethod,
            paymentDate,
        });

        const savedPayment = await newPayment.save();
        res.status(201).json(savedPayment);
    } catch (error) {
        console.error("L·ªói khi th√™m thanh to√°n:", error);
        res.status(400).json({ message: "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá", error });
    }
});

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin thanh to√°n
router.put("/:id", async (req, res) => {
    const { orderId, amount, paymentMethod, paymentDate } = req.body;
    const paymentId = req.params.id; // L·∫•y ID c·ªßa thanh to√°n t·ª´ URL

    try {
        const updatedPayment = await Payment.findByIdAndUpdate(
            paymentId,
            { orderId, amount, paymentMethod, paymentDate },
            { new: true }
        );

        if (!updatedPayment) {
            return res.status(404).json({ message: "Thanh to√°n kh√¥ng t·ªìn t·∫°i" });
        }

        res.json(updatedPayment);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t thanh to√°n", error });
    }
});

// üóëÔ∏è X√≥a thanh to√°n
router.delete("/:id", async (req, res) => {
    try {
        const deletedPayment = await Payment.findByIdAndDelete(req.params.id);

        if (!deletedPayment) {
            return res.status(404).json({ message: "Thanh to√°n kh√¥ng t·ªìn t·∫°i" });
        }

        res.json({ message: "X√≥a thanh to√°n th√†nh c√¥ng", deletedPayment });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a thanh to√°n", error });
    }
});

module.exports = router;