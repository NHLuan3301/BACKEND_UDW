const express = require("express");
const router = express.Router();
const Product = require("../models/Product.js");

router.get("/", async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m", error });
  }
});
// ‚ûï T·∫°o s·∫£n ph·∫©m m·ªõi (Ki·ªÉm tra company tr∆∞·ªõc khi t·∫°o)
router.post("/", async (req, res) => {
  try {
    const { name, price, image, stock, description } = req.body;

    if (!name || !price || !stock) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m" });
    }

    const newProduct = new Product({
      name,
      price,
      image,
      stock,
      description,
    });

    const savedProduct = await newProduct.save();
    res.status(201).json(savedProduct);
  } catch (error) {
    console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
    res.status(400).json({ message: "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá", error });
  }
});

// ‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m (Ki·ªÉm tra n·∫øu c√≥ c·∫≠p nh·∫≠t)
router.put("/:id", async (req, res) => {
  try {
    const updatedProduct = await Product.findByIdAndUpdate(
      req.params.id, // nhan vao id san pham tu param
      req.body, // nhan du lieu san pham update tu body
      { new: true }
    );

    if (!updatedProduct) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    }

    res.json(updatedProduct);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m", error });
  }
});

// üóëÔ∏è X√≥a s·∫£n ph·∫©m
router.delete("/:id", async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);

    if (!deletedProduct) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng", deletedProduct });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a s·∫£n ph·∫©m", error });
  }
});
// Phan trang
router.get("/search", async (req, res) => {
  try {
    // lay du lieu tu nguoi dung truyen vao de xu ly
    let { page, limit, sortBy, order, keyword } = req.query;

    // Chuy·ªÉn ƒë·ªïi page v√† limit sang ki·ªÉu s·ªë nguy√™n, m·∫∑c ƒë·ªãnh page = 1, limit = 10 n·∫øu kh√¥ng c√≥ gi√° tr·ªã t·ª´ client
    page = parseInt(page) || 1;
    limit = parseInt(limit) || 10;

    // X√°c ƒë·ªãnh th·ª© t·ª± s·∫Øp x·∫øp: n·∫øu order = "desc" th√¨ -1 (gi·∫£m d·∫ßn), ng∆∞·ª£c l·∫°i l√† 1 (tƒÉng d·∫ßn)
    order = order === "desc" ? -1 : 1;

    // T√≠nh to√°n s·ªë l∆∞·ª£ng b·∫£n ghi c·∫ßn b·ªè qua ƒë·ªÉ ph√¢n trang (skip)
    const skip = (page - 1) * limit;

    // T·∫°o b·ªô l·ªçc t√¨m ki·∫øm: n·∫øu c√≥ t·ª´ kh√≥a keyword th√¨ t√¨m c√°c s·∫£n ph·∫©m c√≥ t√™n ch·ª©a t·ª´ kh√≥a ƒë√≥ (kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng)
    const filter = keyword ? { name: { $regex: keyword, $options: "i" } } : {};

    // Truy v·∫•n danh s√°ch s·∫£n ph·∫©m t·ª´ database d·ª±a tr√™n b·ªô l·ªçc v√† ph√¢n trang
    const products = await Product.find(filter)
      .sort({ [sortBy]: order }) // S·∫Øp x·∫øp theo tr∆∞·ªùng sortBy v·ªõi th·ª© t·ª± order
      .skip(skip) // B·ªè qua s·ªë l∆∞·ª£ng b·∫£n ghi t∆∞∆°ng ·ª©ng v·ªõi trang hi·ªán t·∫°i
      .limit(limit); // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr·∫£ v·ªÅ tr√™n m·ªôt trang

    // ƒê·∫øm t·ªïng s·ªë s·∫£n ph·∫©m kh·ªõp v·ªõi ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
    const totalProducts = await Product.countDocuments(filter);

    // T√≠nh t·ªïng s·ªë trang (l√†m tr√≤n l√™n)
    const pageCount = Math.ceil(totalProducts / Number(limit));

    // Tr·∫£ v·ªÅ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON
    res.json({
      products: products, // Danh s√°ch s·∫£n ph·∫©m
      totalProducts: totalProducts, // T·ªïng s·ªë s·∫£n ph·∫©m
      pageCount: pageCount, // T·ªïng s·ªë trang
    });
  } catch (error) {
    // X·ª≠ l√Ω l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ trong qu√° tr√¨nh truy v·∫•n
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m", error });
  }
});

module.exports = router;
