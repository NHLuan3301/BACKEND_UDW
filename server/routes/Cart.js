const express = require("express");
const router = express.Router();
const Cart = require("../models/Cart.js");

// üìú L·∫•y danh s√°ch gi·ªè h√†ng
router.get("/", async (req, res) => {
  try {
    const carts = await Cart.find();
    res.json(carts);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch gi·ªè h√†ng", error });
  }
});

// üîç T√¨m ki·∫øm gi·ªè h√†ng theo UserId
router.get("/search", async (req, res) => {
  try {
    const { userId } = req.query;
    if (!userId) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng cung c·∫•p UserId ƒë·ªÉ t√¨m ki·∫øm" });
    }

    const carts = await Cart.find({
      userId: userId,
    }).populate("productId").populate("userId");

    res.json(carts);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi t√¨m ki·∫øm gi·ªè h√†ng", error });
  }
});

// ‚ûï T·∫°o gi·ªè h√†ng m·ªõi
router.post("/", async (req, res) => {
  try {
    const { userId, productId, quantity } = req.body;
    if (!userId || !productId || !quantity) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin gi·ªè h√†ng" });
    }

    // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
    const existingCartItem = await Cart.findOne({ userId, productId });

    if (existingCartItem) {
      // N·∫øu ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
      existingCartItem.quantity += quantity;
      const updatedCart = await existingCartItem.save();
      return res.status(200).json(updatedCart);
    }

    // N·∫øu ch∆∞a t·ªìn t·∫°i, th√™m m·ªõi
    const newCart = new Cart({
      userId,
      productId,
      quantity,
    });

    const savedCart = await newCart.save();
    res.status(201).json(savedCart);
  } catch (error) {
    console.error("L·ªói khi th√™m gi·ªè h√†ng:", error);
    res.status(400).json({ message: "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá", error });
  }
});


// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin gi·ªè h√†ng
router.put("/:id", async (req, res) => {
  const { userId, productId, quantity } = req.body;
  const cartId = req.params.id; // L·∫•y ID c·ªßa gi·ªè h√†ng t·ª´ URL

  try {
    const updatedCart = await Cart.findByIdAndUpdate(
      cartId,
      { userId, productId, quantity },
      { new: true }
    );

    if (!updatedCart) {
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    res.json(updatedCart);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng", error });
  }
});

// üóëÔ∏è X√≥a gi·ªè h√†ng
router.delete("/:id", async (req, res) => {
  try {
    const deletedCart = await Cart.findByIdAndDelete(req.params.id);

    if (!deletedCart) {
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ message: "X√≥a gi·ªè h√†ng th√†nh c√¥ng", deletedCart });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a gi·ªè h√†ng", error });
  }
});

router.delete("/", async (req, res) => {
  try {
    await Cart.deleteMany();
    res.json({ message: "X√≥a t·∫•t c·∫£ gi·ªè h√†ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a t·∫•t c·∫£ gi·ªè h√†ng", error });
  }
})
module.exports = router;